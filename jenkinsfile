pipeline {
    agent any  // Agent avec Python 3.10.12+ et Docker install√©

    environment {
        SONAR_TOKEN = credentials('scanner')  // SonarQube token
        registry = '192.168.33.10:8083'  // Nexus registry
        registryCredentials = 'nexus'  // Credential ID pour Nexus
        imageName = 'pixelette-app'  // Nom de l'image
        imageTag = '1.0'  // Tag par d√©faut, ajust√© avec BUILD_NUMBER
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üßπ Nettoyage du workspace..."
                    cleanWs()
                    echo "üì• Clonage du d√©p√¥t (branche cicd)..."
                    withCredentials([usernamePassword(
                        credentialsId: 'github-token',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_TOKEN'
                    )]) {
                        sh 'git clone -b cicd https://${GIT_USERNAME}:${GIT_TOKEN}@github.com/Helmi-Gargouri/Pixelette.git .'
                    }
                }
            }
        }

stage('Install Python Dependencies') {
    steps {
        script {
            echo "üì¶ Installation des d√©pendances Python..."
            sh '''
                # V√©rification pip3
                command -v pip3 >/dev/null 2>&1 || { 
                    echo "‚ùå pip3 non trouv√©."; 
                    exit 1; 
                }
                
                # V√©rifier si venv est disponible
                if ! python3 -m venv --help > /dev/null 2>&1; then
                    echo "‚ö†Ô∏è python3-venv n'est pas install√©. Contactez l'administrateur."
                    exit 1
                fi
                
                # Cr√©er et activer l'environnement virtuel
                python3 -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                pip install coverage
            '''
        }
    }
}

stage('Run Tests') {
            steps {
                script {
                    echo "üß™ Ex√©cution des tests Django (64 tests attendus)..."
                    sh '''
                        set -e  # Arr√™ter en cas d'erreur
                        
                        # Activez l'environnement virtuel
                        . venv/bin/activate
                        
                        # V√©rifier que Django est install√©
                        echo "üîç V√©rification de l'installation Django..."
                        python -c "import django; print(f'Django version: {django.get_version()}')" || {
                            echo "‚ùå Django n'est pas install√© correctement"
                            exit 1
                        }
                        
                        # Cr√©er le fichier .env si n√©cessaire
                        if [ ! -f .env ]; then
                            echo "üìù Cr√©ation du fichier .env..."
                            cat > .env << 'EOF'
DJANGO_SETTINGS_MODULE=Pixelette.settings
DATABASE_URL=sqlite://:memory:
SECRET_KEY=test-secret-key-for-ci
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1
EOF
                        fi
                        
                        # Exporter les variables d'environnement
                        export DJANGO_SETTINGS_MODULE=Pixelette.settings
                        export SECRET_KEY=test-secret-key-for-ci
                        export DEBUG=False
                        
                        # V√©rifier manage.py
                        if [ ! -f manage.py ]; then
                            echo "‚ùå manage.py introuvable!"
                            ls -la
                            exit 1
                        fi
                        
                        echo "üîß V√©rification des migrations..."
                        python manage.py makemigrations --dry-run --verbosity 1 --check || {
                            echo "‚ö†Ô∏è Migrations non appliqu√©es d√©tect√©es"
                        }
                        
                        echo "üóÉÔ∏è Migration de la base de donn√©es..."
                        python manage.py migrate --run-syncdb --verbosity 1
                        
                        # Cr√©er les r√©pertoires pour les rapports
                        mkdir -p build/reports/coverage build/reports/tests
                        
                        echo "üöÄ Ex√©cution des tests avec coverage..."
                        set +e  # Ne pas arr√™ter si les tests √©chouent
                        coverage run --source=Pixelette manage.py test Pixelette.tests --verbosity 2
                        TEST_EXIT_CODE=$?
                        set -e
                        
                        echo "üìä G√©n√©ration du rapport de couverture..."
                        coverage xml --include="Pixelette/*" -o build/reports/coverage/coverage.xml || {
                            echo "‚ö†Ô∏è Erreur lors de la g√©n√©ration du rapport XML"
                        }
                        
                        coverage report --include="Pixelette/*" || echo "‚ö†Ô∏è Rapport texte non disponible"
                        
                        echo "üìä V√©rification des rapports g√©n√©r√©s:"
                        ls -lah build/reports/coverage/ || true
                        
                        if [ -f build/reports/coverage/coverage.xml ]; then
                            LINES=$(wc -l < build/reports/coverage/coverage.xml)
                            SIZE=$(du -h build/reports/coverage/coverage.xml | cut -f1)
                            echo "‚úÖ Coverage XML g√©n√©r√©: ${LINES} lignes, ${SIZE}"
                            head -n 5 build/reports/coverage/coverage.xml
                        else
                            echo "‚ùå Coverage XML manquant - g√©n√©ration d'un fallback"
                            cat > build/reports/coverage/coverage.xml << 'EOF'
<?xml version="1.0"?><coverage version="1.0"><metrics files="1" loc="100"/></coverage>
EOF
                        fi
                        
                        # Retourner le code de sortie des tests
                        if [ $TEST_EXIT_CODE -ne 0 ]; then
                            echo "‚ö†Ô∏è Les tests ont √©chou√© avec le code: $TEST_EXIT_CODE"
                            exit $TEST_EXIT_CODE
                        fi
                        
                        echo "‚úÖ Tous les tests sont pass√©s!"
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'build/reports/coverage/**/*', allowEmptyArchive: true
                }
                success {
                    echo "‚úÖ Tous les tests sont pass√©s avec succ√®s !"
                }
                failure {
                    echo "‚ùå √âchec des tests. V√©rifiez les logs ci-dessus pour plus de d√©tails."
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    echo "üîç Analyse SonarQube..."
                    def scannerHome = tool 'SonarQube Scanner'
                    withSonarQubeEnv('SonarQube Server') {
                        timeout(time: 10, unit: 'MINUTES') {
                            sh """
                                # Activez l'environnement virtuel
                                . venv/bin/activate
                                ${scannerHome}/bin/sonar-scanner \
                                    -Dsonar.projectKey=pixelette \
                                    -Dsonar.projectName=Pixelette \
                                    -Dsonar.host.url=http://192.168.33.10:9000 \
                                    -Dsonar.login=${SONAR_TOKEN} \
                                    -Dsonar.sources=Pixelette \
                                    -Dsonar.tests=Pixelette/tests \
                                    -Dsonar.python.coverage.reportPaths=build/reports/coverage/coverage.xml \
                                    -Dsonar.python.file.suffixes=py \
                                    -Dsonar.exclusions=**/migrations/**,**/static/**,**/media/**,**/admin/** \
                                    -Dsonar.sourceEncoding=UTF-8 \
                                    -Dsonar.verbose=true
                            """
                        }
                    }
                }
            }
            post {
                success {
                    echo "‚úÖ Analyse SonarQube r√©ussie."
                    timeout(time: 10, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true
                    }
                }
                failure {
                    echo "‚ùå √âchec de l'analyse SonarQube."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "üê≥ Construction de l'image Docker..."
                    sh '''
                        docker-compose build
                        echo "üîç V√©rification image: ${imageName}:latest"
                        docker images ${imageName} | grep latest || {
                            echo "‚ùå Image ${imageName}:latest manquante!"
                            exit 1
                        }
                    '''
                }
            }
        }

        stage('Deploy to Nexus') {
            steps {
                script {
                    echo "üì¶ D√©ploiement vers Nexus (${registry})..."
                    def imageTagFinal = env.BUILD_NUMBER ?: env.imageTag
                    def fullImage = "${registry}/${imageName}:${imageTagFinal}"
                    sh '''
                        set -e
                        echo "üîç V√©rification image: ${imageName}:latest"
                        docker images ${imageName} | grep latest || {
                            echo "‚ùå Image ${imageName}:latest manquante!"
                            exit 1
                        }
                    '''
                    withCredentials([usernamePassword(
                        credentialsId: registryCredentials,
                        usernameVariable: 'NEXUS_USER',
                        passwordVariable: 'NEXUS_PASS'
                    )]) {
                        sh """
                            echo "üîê Login ${registry}..."
                            echo "\${NEXUS_PASS}" | docker login ${registry} -u "\${NEXUS_USER}" --password-stdin
                            echo "üè∑Ô∏è Tag: ${fullImage}"
                            docker tag ${imageName}:latest "${fullImage}"
                            echo "üöÄ Push ${fullImage}..."
                            docker push "${fullImage}"
                            docker logout ${registry}
                            echo "üîí Logout OK"
                        """
                    }
                    env.DEPLOYED_IMAGE = fullImage
                    echo "‚úÖ Image d√©ploy√©e: ${fullImage}"
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Nettoyage..."
            archiveArtifacts artifacts: 'build/reports/coverage/*', allowEmptyArchive: true
            publishHTML([
                allowMissing: true,
                alwaysLinkToLastBuild: true,
                keepAll: true,
                reportDir: 'build/reports/coverage',
                reportFiles: 'index.html',
                reportName: 'Coverage Report'
            ])
            cleanWs()
        }
        success {
            echo "üéâ Pipeline ex√©cut√© avec succ√®s !"
        }
        failure {
            echo "‚ùå Le pipeline a √©chou√©. V√©rifiez les logs."
        }
    }
}