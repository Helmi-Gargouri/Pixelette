"""
G√©n√©rateur de commentaires IA avec OpenAI
G√©n√®re automatiquement des commentaires intelligents bas√©s sur les ≈ìuvres d'art
"""

import openai
from django.conf import settings
import logging
from typing import Dict, List, Optional
import json

logger = logging.getLogger(__name__)

class CommentAIGenerator:
    """
    G√©n√©rateur de commentaires IA utilisant OpenAI GPT
    """
    
    def __init__(self):
        # Configuration OpenAI
        self.client = openai.OpenAI(
            api_key=getattr(settings, 'OPENAI_API_KEY', None)
        )
        self.model = getattr(settings, 'OPENAI_MODEL', 'gpt-3.5-turbo')
        
    def generate_comment(self, oeuvre_data: Dict) -> Dict:
        """
        G√©n√®re un commentaire intelligent bas√© sur les donn√©es de l'≈ìuvre
        
        Args:
            oeuvre_data (Dict): {
                'titre': str,
                'description': str,
                'technique': str,
                'dimension': str,
                'auteur_nom': str,
                'image_url': str (optionnel)
            }
        
        Returns:
            Dict: {
                'success': bool,
                'comment': str,
                'style': str,  # 'enthusiastic', 'analytical', 'poetic'
                'confidence': float,
                'metadata': dict
            }
        """
        
        try:
            # V√©rifier la cl√© API
            if not self.client.api_key:
                return {
                    'success': False,
                    'error': 'Cl√© API OpenAI non configur√©e'
                }
            
            # Construire le prompt intelligent
            prompt = self._build_intelligent_prompt(oeuvre_data)
            
            logger.info(f"ü§ñ G√©n√©ration de commentaire IA pour: {oeuvre_data.get('titre', '≈íuvre')}")
            
            # Appeler OpenAI
            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {
                        "role": "system", 
                        "content": self._get_system_prompt()
                    },
                    {
                        "role": "user", 
                        "content": prompt
                    }
                ],
                max_tokens=200,
                temperature=0.8,  # Cr√©ativit√© mod√©r√©e
                top_p=0.9
            )
            
            # Extraire la r√©ponse
            ai_response = response.choices[0].message.content.strip()
            
            # Analyser et structurer la r√©ponse
            result = self._parse_ai_response(ai_response, oeuvre_data)
            
            logger.info(f"‚úÖ Commentaire IA g√©n√©r√©: {result['style']} (confiance: {result['confidence']:.2f})")
            
            return result
            
        except openai.RateLimitError:
            logger.error("‚ùå Limite de taux OpenAI atteinte")
            return self._generate_fallback_comment(oeuvre_data, "Limite de requ√™tes API atteinte")
        except openai.AuthenticationError:
            logger.error("‚ùå Erreur d'authentification OpenAI")
            return self._generate_fallback_comment(oeuvre_data, "Cl√© API OpenAI invalide")
        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©ration IA: {e}")
            return self._generate_fallback_comment(oeuvre_data, str(e))
    
    def _get_system_prompt(self) -> str:
        """Prompt syst√®me pour d√©finir le comportement de l'IA"""
        return """Tu es un critique d'art passionn√© et bienveillant qui √©crit des commentaires authentiques sur des ≈ìuvres d'art. 

CONSIGNES:
- √âcris des commentaires naturels comme si tu √©tais un visiteur passionn√©
- Sois positif et constructif, m√™me pour des critiques
- Utilise un langage accessible, pas trop technique
- Varie les styles: enthousiaste, analytique, po√©tique, personnel
- Maximum 150 mots
- √âcris en fran√ßais
- Inclus des √©mojis occasionnellement pour l'authenticit√©
- √âvite les clich√©s d'art trop pompeux

STYLES √Ä ALTERNER:
- Enthousiaste: "Wow, cette ≈ìuvre me transporte..."
- Analytique: "J'observe ici l'usage subtil de..."
- Po√©tique: "Cette cr√©ation √©voque en moi..."
- Personnel: "Cette ≈ìuvre me rappelle..."

R√©ponds UNIQUEMENT avec le commentaire, pas d'introduction."""

    def _build_intelligent_prompt(self, oeuvre_data: Dict) -> str:
        """Construit un prompt intelligent bas√© sur les donn√©es de l'≈ìuvre"""
        
        titre = oeuvre_data.get('titre', 'Sans titre')
        description = oeuvre_data.get('description', '')
        technique = oeuvre_data.get('technique', '')
        dimension = oeuvre_data.get('dimension', '')
        auteur_nom = oeuvre_data.get('auteur_nom', 'Artiste')
        
        prompt_parts = [f"≈íuvre: '{titre}' par {auteur_nom}"]
        
        if description:
            prompt_parts.append(f"Description: {description}")
        
        if technique:
            prompt_parts.append(f"Technique: {technique}")
            
        if dimension:
            prompt_parts.append(f"Dimensions: {dimension}")
        
        # Ajouter des instructions contextuelles
        prompt_parts.append("\n√âcris un commentaire authentique de visiteur sur cette ≈ìuvre.")
        
        return "\n".join(prompt_parts)
    
    def _parse_ai_response(self, ai_response: str, oeuvre_data: Dict) -> Dict:
        """Parse et analyse la r√©ponse IA"""
        
        # D√©terminer le style du commentaire
        style = self._detect_comment_style(ai_response)
        
        # Calculer un score de confiance bas√© sur la longueur et la richesse
        confidence = self._calculate_confidence(ai_response, oeuvre_data)
        
        # Nettoyer le commentaire
        clean_comment = ai_response.strip()
        
        return {
            'success': True,
            'comment': clean_comment,
            'style': style,
            'confidence': confidence,
            'metadata': {
                'length': len(clean_comment),
                'words': len(clean_comment.split()),
                'model_used': self.model
            }
        }
    
    def _detect_comment_style(self, comment: str) -> str:
        """D√©tecte le style du commentaire g√©n√©r√©"""
        
        comment_lower = comment.lower()
        
        # Mots-cl√©s par style
        enthusiastic_keywords = ['wow', 'magnifique', 'incroyable', 'superbe', '√©poustouflant', '!']
        analytical_keywords = ['observe', 'analyse', 'technique', 'composition', 'structure']
        poetic_keywords = ['√©voque', 'transporte', 'ressent', '√¢me', '√©motion', 'po√©sie']
        personal_keywords = ['me rappelle', 'j\'aime', 'pour moi', 'personnellement']
        
        scores = {
            'enthusiastic': sum(1 for word in enthusiastic_keywords if word in comment_lower),
            'analytical': sum(1 for word in analytical_keywords if word in comment_lower),
            'poetic': sum(1 for word in poetic_keywords if word in comment_lower),
            'personal': sum(1 for word in personal_keywords if word in comment_lower)
        }
        
        return max(scores, key=scores.get) or 'general'
    
    def _calculate_confidence(self, comment: str, oeuvre_data: Dict) -> float:
        """Calcule un score de confiance pour le commentaire g√©n√©r√©"""
        
        confidence = 0.5  # Base
        
        # Longueur appropri√©e
        word_count = len(comment.split())
        if 20 <= word_count <= 100:
            confidence += 0.2
        
        # Mention des √©l√©ments de l'≈ìuvre
        titre = oeuvre_data.get('titre', '').lower()
        if titre and any(word in comment.lower() for word in titre.split()):
            confidence += 0.15
            
        # Richesse du vocabulaire
        unique_words = len(set(comment.lower().split()))
        if unique_words > word_count * 0.7:  # 70% de mots uniques
            confidence += 0.15
        
        return min(confidence, 1.0)

    def _generate_fallback_comment(self, oeuvre_data: Dict, error_reason: str) -> Dict:
        """G√©n√®re un commentaire de fallback si OpenAI √©choue"""
        
        titre = oeuvre_data.get('titre', 'cette ≈ìuvre')
        description = oeuvre_data.get('description', '')
        technique = oeuvre_data.get('technique', '')
        auteur_nom = oeuvre_data.get('auteur_nom', 'l\'artiste')
        
        # Templates de commentaires intelligents bas√©s sur les donn√©es
        templates = [
            f"Cette ≈ìuvre '{titre}' de {auteur_nom} est vraiment captivante ! J'appr√©cie particuli√®rement la fa√ßon dont l'artiste a su transmettre son message √† travers cette cr√©ation. üé®",
            f"Magnifique travail ! '{titre}' d√©montre un vrai talent artistique. {auteur_nom} a cr√©√© quelque chose de tr√®s expressif qui ne laisse pas indiff√©rent.",
            f"J'aime beaucoup cette ≈ìuvre. '{titre}' a une personnalit√© unique qui refl√®te bien le style de {auteur_nom}. Bravo pour cette belle cr√©ation ! ‚ú®",
            f"Tr√®s belle r√©alisation ! Cette pi√®ce '{titre}' montre une ma√Ætrise technique impressionnante. {auteur_nom} sait vraiment capter l'attention du spectateur.",
            f"Quelle inspiration ! '{titre}' est une ≈ìuvre qui interpelle et fait r√©fl√©chir. J'admire la cr√©ativit√© de {auteur_nom} dans cette composition."
        ]
        
        # Personnaliser selon la technique si disponible
        if technique:
            technique_comments = {
                'peinture': f"La technique de peinture utilis√©e dans '{titre}' est remarquable. {auteur_nom} ma√Ætrise parfaitement son art ! üé®",
                'sculpture': f"Cette sculpture '{titre}' de {auteur_nom} est impressionnante ! La forme et les volumes sont parfaitement ma√Ætris√©s.",
                'photographie': f"Belle capture ! Cette photographie '{titre}' de {auteur_nom} saisit un moment unique avec une grande sensibilit√©.",
                'dessin': f"Le dessin '{titre}' r√©v√®le tout le talent de {auteur_nom}. Chaque trait semble pens√© et ma√Ætris√©.",
                'digital': f"Excellent travail num√©rique ! '{titre}' montre que {auteur_nom} ma√Ætrise parfaitement les outils digitaux."
            }
            
            for tech_key, comment in technique_comments.items():
                if tech_key.lower() in technique.lower():
                    templates.insert(0, comment)
                    break
        
        # Personnaliser selon la description si disponible
        if description and len(description) > 10:
            if 'couleur' in description.lower():
                templates.insert(0, f"Les couleurs de '{titre}' sont magnifiques ! {auteur_nom} a un sens artistique remarquable pour les harmonies color√©es. üåà")
            elif 'lumi√®re' in description.lower():
                templates.insert(0, f"Le jeu de lumi√®res dans '{titre}' est fascinant ! {auteur_nom} ma√Ætrise parfaitement les contrastes et les nuances.")
        
        # S√©lectionner un template al√©atoirement
        import random
        selected_comment = random.choice(templates)
        
        # D√©tecter le style du commentaire fallback
        style = 'enthusiastic' if any(word in selected_comment.lower() for word in ['magnifique', 'excellent', 'bravo', '!']) else 'general'
        
        logger.info(f"üîÑ Fallback: Commentaire g√©n√©r√© localement (raison: {error_reason[:50]}...)")
        
        return {
            'success': True,
            'comment': selected_comment,
            'style': style,
            'confidence': 0.75,  # Bonne confiance pour les templates
            'metadata': {
                'length': len(selected_comment),
                'words': len(selected_comment.split()),
                'model_used': 'fallback_template',
                'fallback_reason': error_reason
            }
        }

    def generate_multiple_suggestions(self, oeuvre_data: Dict, count: int = 3) -> List[Dict]:
        """
        G√©n√®re plusieurs suggestions de commentaires avec diff√©rents styles
        """
        suggestions = []
        
        for i in range(count):
            # Varier l√©g√®rement la temp√©rature pour plus de diversit√©
            temp_client = openai.OpenAI(api_key=self.client.api_key)
            
            try:
                result = self.generate_comment(oeuvre_data)
                if result['success']:
                    suggestions.append(result)
            except Exception as e:
                logger.warning(f"√âchec g√©n√©ration suggestion {i+1}: {e}")
        
        return suggestions


# Fonction utilitaire pour usage facile
def generate_ai_comment(oeuvre_data: Dict) -> Dict:
    """
    Fonction utilitaire pour g√©n√©rer un commentaire IA
    
    Usage:
        result = generate_ai_comment({
            'titre': 'La Joconde',
            'description': 'Portrait de Lisa Gherardini...',
            'auteur_nom': 'L√©onard de Vinci'
        })
    """
    generator = CommentAIGenerator()
    return generator.generate_comment(oeuvre_data)


def generate_multiple_ai_comments(oeuvre_data: Dict, count: int = 3) -> List[Dict]:
    """G√©n√®re plusieurs suggestions de commentaires"""
    generator = CommentAIGenerator()
    return generator.generate_multiple_suggestions(oeuvre_data, count)